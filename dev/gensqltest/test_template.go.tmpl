{{- define "tests" }}
    {{- range . }}
    // --------------------------------------------------------------------------
    t.Run("{{ .Name }}", func(t *testing.T) {
        db, err := genji.Open(":memory:")
        assert.NoError(t, err)
        defer db.Close()

        setup(t, db)
        postSetup(t, db)

        {{- range .Statements }}
        t.Run(`{{ escapeBackticks (index .Expr 0) }}`, func(t *testing.T) {
            q := `
{{- range .Expr }}
{{ escapeBackticks . }}
{{- end }}
`
            {{- if .Fails }}
            err := db.Exec(q)
                {{- if .ErrorMatch }}
            require.NotNil(t, err, "expected error, got nil")
            require.Regexp(t, regexp.MustCompile("{{ .ErrorMatch }}"), err.Error())
                {{- else }}
            assert.Errorf(t, err, "expected\n%s\nto raise an error but got none", q)
                {{- end }}
            {{- else }}
            res, err := db.Query(q)
            assert.NoError(t, err)
            defer res.Close()

            {{- if gt (len .Result) 0 }}
            raw := `
{{- range .Result }}
{{ escapeBackticks . }}
{{- end}}
`
            testutil.RequireStreamEq(t, raw, res, {{if .Sorted }}true{{else}}false{{end}})
            {{- end }}
            {{- end }}
        })
        {{- end }}
    })
    {{""}}
    {{- end }}
{{- end }}

{{- define "exec" }}
    {{.Name}} = func(t *testing.T, db *genji.DB) {
        t.Helper()
        q := `
{{- range .Statements }}
{{ . }}
{{- end }}
`
        err := db.Exec(q)
        assert.NoError(t, err)
    }
{{- end }}

{{- $tests := .Suite.Tests }}
{{- $setup := .Suite.Setup }}
/*
* CODE GENERATED AUTOMATICALLY WITH github.com/genjidb/genji/dev/gensqltest
* THIS FILE SHOULD NOT BE EDITED BY HAND
*/
package {{ .Package }}

import (
	"testing"

	"github.com/genjidb/genji"
	"github.com/genjidb/genji/internal/testutil"
	"github.com/genjidb/genji/internal/testutil/assert"
	"github.com/stretchr/testify/require"
)

func Test{{ .TestName }}(t *testing.T) {
    setup := func(t *testing.T, db *genji.DB) {}
    postSetup := func(t *testing.T, db *genji.DB) {}

    {{- block "exec" dict "Name" "setup" "Statements" $setup }}{{- end }}

    {{- if ne (len .Suite.Suites) 0 }}
        tests := []struct{
            name string
            postSetup string
        }{
            {{- range .Suite.Suites }}
            {name: "{{.Name}}", postSetup: `{{- range .Statements }}
{{ . }}
{{- end }}`},
            {{- end }}
        }

        for _, test := range tests {
            t.Run(test.name, func(t *testing.T) {
                postSetup = func(t *testing.T, db *genji.DB) {
                    t.Helper()

                    err := db.Exec(test.postSetup)
                    assert.NoError(t, err)
                }

                {{- block "tests" $tests }}{{- end }}
            })
        }
    {{- else }}
        {{- block "setup" $setup }}{{- end }}

        {{- block "tests" $tests }}{{- end }}
    {{- end }}
}
